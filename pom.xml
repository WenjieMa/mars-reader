<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>mars-reader</groupId>
    <artifactId>mars-reader</artifactId>
    <version>1.1.2</version>

    <build>

        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4.1</version>
                <configuration>
                    <!-- get all project dependencies -->
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <!-- MainClass in mainfest make a executable jar -->
                    <archive>
                        <manifest>
                            <mainClass>util.Microseer</mainClass>
                        </manifest>
                    </archive>

                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <!-- bind to the packaging phase -->
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <!-- 发布项目配置 -->
    <distributionManagement>

        <!-- 部署当前项目的构件到远程库的配置 -->
        <!-- maven中的仓库分为两种，snapshot快照仓库和release发布仓库。 -->
        <!-- snapshot快照仓库用于保存开发过程中的不稳定版本，release正式仓库则是用来保存稳定的发行版本。 -->
        <!-- 定义一个组件/模块为快照版本，只需要在pom文件中在该模块的版本号后加上-SNAPSHOT即可 -->
        <!-- maven会根据模块的版本号(pom文件中的version)中是否带有-SNAPSHOT来判断是快照版本还是正式版本。 -->
        <!-- 如果是快照版本，那么在mvn deploy时会自动发布到快照版本库中，而使用快照版本的模块， 在不更改版本号的情况下，直接编译打包时，maven会自动从镜像服务器上下载最新的快照版本。 -->
        <!-- 如果是正式发布版本，那么在mvn deploy时会自动发布到正式版本库中，而使用正式版本的模块， 在不更改版本号的情况下，编译打包时如果本地已经存在该版本的模块则不会主动去镜像服务器上下载。 -->
        <!-- 所以，我们在开发阶段，可以将公用库的版本设置为快照版本，而被依赖组件则引用快照版本进行开发， 在公用库的快照版本更新后，我们也不需要修改pom文件提示版本号来下载新的版本，直接mvn执行相关编译、打包命令即可重新下载最新的快照库了，从而也方便了我们进行开发。 -->

        <!-- 发布版本仓库 -->
        <repository>
            <id>releases</id>
            <url>http://10.18.97.175:8081/nexus/content/repositories/releases</url>
        </repository>
        <!-- 快照版本仓库 -->
        <snapshotRepository>
            <id>snapshots</id>
            <url>http://10.18.97.175:8081/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <dependencies>

        <!-- OCR start -->
        <!-- OCR识别 Tesseract的java实现  试了4.5.x版本有点Bug，最后使用4.3.x的最新版 -->
        <!-- https://mvnrepository.com/artifact/net.sourceforge.tess4j/tess4j -->
        <dependency>
            <groupId>net.sourceforge.tess4j</groupId>
            <artifactId>tess4j</artifactId>
            <version>4.3.1</version>
        </dependency>
        <!-- OCR end -->


        <!-- pdf识别 start-->
        <!-- 2.0.17有很多bug，比如标题重复4遍读取。最后使用2.0.15版本 -->
        <!-- https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox -->
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>pdfbox</artifactId>
            <version>2.0.15</version>
        </dependency>

        <!--itext7也会有重复读取标题的Bug-->
        <!-- https://mvnrepository.com/artifact/com.itextpdf/itext7-core -->
        <!--dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itext7-core</artifactId>
            <version>7.1.0</version>
            <type>pom</type>
        </dependency-->
        <!-- pdf识别 end-->


        <!--word识别 doc和docx  start-->
        <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>4.1.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>4.1.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.poi/poi-scratchpad -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-scratchpad</artifactId>
            <version>4.1.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.15</version>
        </dependency>
        <!--word识别 doc和docx  end-->

    </dependencies>


</project>